#summary This page explains how to migrate to gwt-test-utils-0.25

= Purpose =

For the 0.25 release of *gwt-test-utils*, the public API has changed to be more convenient. Unfortunatly for our users, it will involve some changes that are listed bellow.


= Details =

1) gwt-test-utils third-party dependencies have been updated.
=> So, if you're not using maven, you first will have to update [http://code.google.com/p/gwt-test-utils/wiki/HowToUse#Without_Maven gwt-test-utils dependencies].

2) Some classes of *gwt-test-utils-integration* module, which was used to provide with CSV-based synthax for complex integration scenario, have been moved to *gwt-test-utils* core module. Now, you will be able to bind your RPC service implementation to your client side code without *gwt-test-utils-integration* module.

Since it just deals with CSV synthax feature, it has been renamed to "{{{gwt-test-utils-csv}}}".

=> So, if you're using maven and have a dependency to the old *gwt-test-utils-integration* module, you would have to replace it by the new *gwt-test-utils-csv* artifactId.

3) Some classes has been renamed for gwt-test-utils. Here is the list.

==== In {{{gwt-test-utils}}} ====

|| {{{AbstractGwtTest}}} || => || {{{GwtTest}}} ||
|| {{{AbstractGwtEasyMockTest}}} || => || {{{GwtTestWithMocks}}} ||
|| {{{GwtTestReflectionUtils}}} || => ||  {{{GwtReflectionUtils}}} ||

==== In {{{gwt-test-utils-csv}}} (used to be {{{gwt-test-utils-integration}}}) ====

|| {{{AbstractGwtIntegrationShell}}} || => || {{{GwtCsvTest}}} ||


4) Some deprecated methods have now been removed :

 * Gwt.click(), Gwt.blur()... => you will have to use {{{Browser.click()}}}, {{{Browser.blur()}}}, etc...

 ====5) Configuring your META-INF/gwt-test-utils.properties ====
 
 Since *gwt-test-utils* must know which class will be compiled in JavaScript code, you have to tell it through a simple properties file.
 This is quite simple : if it doesn't exist yet, add a file named *gwt-test-utils.properties* in the *META-INF* folder of your test classpath (for maven users : {{{src/test/resources/META-INF/gwt-test-utils.properties}}}).
 
In this file, you have to declare any GWT module configuration file you've created in your application this way :

{{{
com/mycompany/gwtmodule1/Module1.gwt.xml =  module-file
com/mycompany/gwtmodule2/Module2.gwt.xml = module-file
}}}

If your declared modules are inherting GWT modules from third-party jars (for example : {{{com.google.gwt.user.User}}}), you would not have to declare this parent module in your {{{gwt-test-utils.properties}}} file : the framework handle it for you.

Finally, if your application is multi-module, you would have to tell *gwt-test-utils* which module your {{{GwtTest}}} class is testing.
This is done by overrding {{{GwtTest.getModuleName()}}} method. Example :

{{{
  @Override
  protected String getModuleName() {
      // we want to test "Module1", which is corresponding to com/mycompany/gwtmodule1/Module1.gwt.xml
      return "Module1";
  }
}}}