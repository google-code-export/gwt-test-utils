#summary The gwt-test-utils "Hello World !" application

Since *gwt-test-utils* is a testing framework, this page won't explain how to develop a "Hello World !" application, but how to test a GWT "Hello world !" application instead :-)

Therefore, the purpose of this page is to help you setting up *gwt-test-utils* basics and write your first test in less than 5 minutes.

If you're not familiar with GWT yet... well, it would be hard to have a GWT app and some unit tests working in 5 minutes ! You should consider the [http://code.google.com/intl/fr-FR/webtoolkit/gettingstarted.html GWT official Getting Started] before continuing with *gwt-test-utils*.


= Creating the GWT "Hello World !" application =

Let's create an out-of-the-box GWT application with the [http://code.google.com/intl/fr-FR/eclipse/docs/getting_started.html GWT plugin for eclipse] : 
 
 * Select *File > New > Web Application Project* from the Eclipse menu.

 * In the *New Web Application Project* wizard, enter a name for your project ({{{GwtTestSample}}}) and a java package name, ({{{com.example.mywebapp}}}). 

 * Be sure *Generate GWT sample code* is checked 

 * Click *Finish*.


Launch the generated 'GwtTestSample' application. It is very basic : 

 * one label
 * one textbox
 * one 'Send' button

Fill the textbox with 'World', and click the button. The client calls the server which validate the text has at least 4 characters and fill a DialogBox with server-side generated HTML. This is a typical GWT use case.

Because it would be a non-sense to test the client user-agent or server internal information in automatic tests, modify the server side HTML construction (`GreetingServiceImpl.greetServer(...)` function) :

{{{
  public String greetServer(String input) throws IllegalArgumentException {
    // Verify that the input is valid.
    if (!FieldVerifier.isValidName(input)) {
      // If the input is not valid, throw an IllegalArgumentException back to
      // the client.
      throw new IllegalArgumentException(
          "Name must be at least 4 characters long");
    }

    // Escape data from the client to avoid cross-site script vulnerabilities.
    input = escapeHtml(input);

    return "Hello, " + input + "!";
  }
}}}


= Time to test =

Ok, you now have a very simple "Hello World !" application. The most logical way to test it would be something like :

 * *Arrange :* Fill the textbox
 * *Act :* Click the 'Send' button
 * *Assert :* Check the dialogbox is shown and its html is like expected


But testing it with {{{GWTTestCase}}} would not be so simple. You would have to :

 * Launch a jetty instance. Ok, this is done behind the scene by {{{GWTTestCase}}}, but it's very, very slow...
 * Design your unit test to be compatible with the asynchronous server call, e.g., tell GWTTestCase to wait x milliseconds for server response..
 * manually cleanup the DOM after each @Test method by overriding the [http://google-web-toolkit.googlecode.com/svn/javadoc/1.6/com/google/gwt/junit/client/GWTTestCase.html#gwtTearDown() gwtTearDown()] method.

 
=== Let's do this with gwt-test-utils ===

1) Add all librairies requiered by gwt-test-utils. They are available in the lastest bundle under the [http://code.google.com/p/gwt-test-utils/downloads/list Download section].

1) Create a META-INF/gwt-test-utils.properties file in your test classpath, e.g., in "test" directory. Add this line in it :

{{{
com/example/mywebapp/GwtTestSample.gwt.xml = module-file
}}}

Each module file declared here will be parsed by gwt-test-utils to know which classes are supposed to by compiled in JavaScript and operated some magic modifications on them.

Note that you won't have to declare {{{.gwt.xml}}} files from modules which are inherited by the module you've declared in {{{gwt-test-utils.properties}}} file. 
In your sample application, it would be useless to declare this : 
com/google/gwt/user/theme/standard/Standard.gwt.xml since you have the corresponding inherit declaration in your GwtTestSample.gwt.xml.

3) In GwtTestSample.java, declare all widgets which will be instanciated as class variable, so you can access them in your test :

{{{
public class GwtTestSample implements EntryPoint {
  
  Button sendButton;
  TextBox nameField;
  Label errorLabel;
  DialogBox dialogBox;
  Button closeButton;
  Label textToServerLabel;
  HTML serverResponseLabel;

  ...

  public void onModuleLoad() {
    sendButton = new Button("Send");
    nameField = new TextBox();
    errorLabel = new Label();
    dialogBox = new DialogBox();
    closeButton = new Button("Close");
    textToServerLabel = new Label();
    serverResponseLabel = new HTML();

    ...
  }
}
}}}

Note that they are declared as "package-protected" class properties to be accessible directly in the test you are gonna write (in the same package).
But you could make them private if you want and use java reflection to access them without any GWT constraint ;-)

4) Now, you can create the test class, like this :

{{{

public class GwtTestSamleTest extends GwtTest {

  private GwtTestSample app;

  @Override
  public String getModuleName() {
    return "com.example.mywebapp.GwtTestSample";
  }

  @Before
  public void setupGwtTestSample() {
    app = new GwtTestSample();
    app.onModuleLoad();

    // Some pre-assertions
    Assert.assertFalse(app.dialogBox.isShowing());
    Assert.assertEquals("", app.errorLabel.getText());
  }
  
  @Test
  public void checkClickOnSendMoreThan4chars() {
    // Arrange
    Browser.fillText(app.nameField, "World");

    // Act
    Browser.click(app.sendButton);

    // Assert
    Assert.assertTrue(app.dialogBox.isShowing());
    Assert.assertEquals("", app.errorLabel.getText());
    Assert.assertEquals("Hello, World!", app.serverResponseLabel.getHTML());
    Assert.assertEquals("Remote Procedure Call", app.dialogBox.getText());
  }
  
}

}}}

 * The test class *must* extend {{{GwtTest}}}, which is the *gwt-test-utils* alternative to GWT {{{GWTTestCase}}}.

 * You must provide the full qualified name of the current tested module by implementing the {{{getModuleName()}}} method. *Be carefull to use a module you've declared in your {{{META-INF/gwt-test-utils.properties}}}* with the 'module-file' key/value pair. Otherwise, an exception would be thrown.

 * Before each test method, create and initialize a new app by calling the {{{EntryPoint.onModuleLoad()}}} method on it. The "pre assertions" show you that the DOM is automatically reinitialize between two tests :-)

 * Finally, your test method which check the result of a click with a 5 characters long string is pretty straightfoward. Use the {{{Browser}}} class to simulate any DOM event of your choice.


Now, write a test to check an error is displayed when filling a less than 4 character String in the textbox :

{{{
  @Test
  public void checkClickOnSendLessThan4chars() {
    // Arrange
    Browser.fillText(app.nameField, "123");

    // Act
    Browser.click(app.sendButton);

    // Assert
    Assert.assertFalse(app.dialogBox.isShowing());
    Assert.assertEquals("Please enter at least four characters",
        app.errorLabel.getText());
  }
}}}

Very simple, isn't it ?


You may have noticed that the generated code handle a "press enter" action, which also send the text to the server. Let's write a test for it :

{{{
  @Test
  public void checkPressEnterMoreThan4chars() {
    // Arrange
    Browser.fillText(app.nameField, "Enter");
    Event keyUpEvent = EventBuilder.create(Event.ONKEYUP).setKeyCode(
        KeyCodes.KEY_ENTER).build();

    // Act
    Browser.dispatchEvent(app.nameField, keyUpEvent);

    // Assert
    Assert.assertTrue(app.dialogBox.isShowing());
    Assert.assertEquals("", app.errorLabel.getText());
    Assert.assertEquals("Hello, Enter!", app.serverResponseLabel.getHTML());
    Assert.assertEquals("Remote Procedure Call", app.dialogBox.getText());
  }
}}}

 * In the arrange phase, a GWT {{{Event}}} is created through the *gwt-test-utils* {{{EventBuilder}}}. It has been designed to build very complex events easily.

 * Launch it {{{Browser.dispatchEvent}}}, and everything will work as expected !

*NOTE :* Actually, the {{{Browser}}} class provides a lot of helper methods, such as {{{Browser.keyUp(Widget, KeyCode)}}} which would be more appropriate for this test. But we just wanted to introduce the {{{EventBuilder}}} here :-)


= Conclusion =

Well, this was just an introduction about what *gwt-test-utils* is able to do. If you are interesed in the many other feature the framework provides, you should considere reading the complete [http://code.google.com/p/gwt-test-utils/wiki/UserGuide User Guide] :-)