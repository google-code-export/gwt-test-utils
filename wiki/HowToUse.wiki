#summary This page explains how to setup your project to use gwt-test-utils
#sidebar TableOfContents

= With Maven =

== Pom release configuration ==

First, you have to setup the required dependency in the _pom.xml_ :

{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.octo.gwt.test</groupId>
      <artifactId>gwt-test-utils</artifactId>
      <version>0.19</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies>   
}}}

If you want to run integration tests with *gwt-test-utils* scenario writer feature, you would have to setup another dependency : 

{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.octo.gwt.test</groupId>
      <artifactId>gwt-test-utils-integration</artifactId>
      <version>0.19</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies>   
}}}

Note that *gwt-test-utils-integration* module directly depends on *gwt-test-utils*, so you don't need to declare the first dependency in your {{{pom.xml}}}.

In the two cases, you will also have to specify the *gwt-test-utils* Maven repository :

{{{
<repositories>
   ...
   <repository>
      <id>forge.octo.com</id>
      <url>http://forge.octo.com/nexus/content/repositories/releases/</url>
   </repository>
   ...
</repositories>
}}}

Since *gwt-test-utils* is memory expensive (to test GWT in a simple JVM has a cost ;-)), you  should increase the memory available for your tests, as shown in this example :

{{{
<plugins>
   ...
   <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <configuration>
         <argLine>-XX:MaxPermSize=128M -Xmx512M</argLine>
      </configuration>
   </plugin>
   ...
</plugins>
}}}

== POM snapshot configuration ==

Sometimes, it could be helpfull to get the lastest snapshot. It's done with the following configuration :


{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.octo.gwt.test</groupId>
      <artifactId>gwt-test-utils-integration</artifactId>
      <version>0.20-SNAPSHOT</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies> 

...

<repositories>
   ...
   <repository>
      <id>snapshot-forge.octo.com</id>
         <url>http://forge.octo.com/nexus/content/repositories/snapshots/</url>
         <snapshots>
            <enabled>true</enabled>
         </snapshots>
         <releases>
            <enabled>false</enabled>
         </releases>
      </repository>
   ...
</repositories>
}}}


== Under eclipse, on a maven project ==

To run your unit tests directly inside eclipse in a maven project, you should use the POM configurations explained above (dependency, repository and plugin configuration).

Then, just open a new JUnit Run configuration, and specify in the "JVM Arguments" text area the amount of memory you'll need for your tests.

= Without Maven =

To run your GWT unit tests without Maven, just add the *gwt-test-utils-x.jar* to the classpath :-)

*gwt-test-utils* jars are available through [http://forge.octo.com/nexus/content/repositories/releases/com/octo/gwt/test/ gwt-test-utils releases repository] or through [http://forge.octo.com/nexus/content/repositories/snapshots/com/octo/gwt/test/ gwt-test-utils snapshots repository], which are provided by Octo Technology.

List of third-party jars requiered by *gwt-test-utils* :

 * bcel-5.2.jar
 * cglib-nodep-2.1_3.jar
 * commons-lang-2.4.jar
 * easymock-2.3.jar
 * easymockclassextension-2.3.jar
 * gwt-servlet-2.0.4.jar
 * gwt-user-2.0.4.jar
 * htmlparser-1.6.jar
 * jakarta-regexp-1.4.jar
 * javassist-3.8.0.GA.jar
 * junit-4.7.jar
 * log4j-1.2.14.jar



List of third-party jars requiered by *gwt-test-utils-integration* :

Same dependencies as *gwt-test-utils* plus :

 * antlr-runtime-3.0.1.jar
 * stringtemplate-3.1-b1.jar