#summary This page explains how to setup your project to use gwt-test-utils
#labels Phase-Requirements
#sidebar TableOfContents

= Getting gwt-test-utils =

_gwt-test-utils_ is an open source framework composed of several modules you can combine :

 * *gwt-test-utils-X.jar* : the core module of gwt-test-utils. It enables to execute GWT client classes in a standalone JVM.

 * *gwt-test-utils-csv-X.jar* : use this module if you want [http://code.google.com/p/gwt-test-utils/wiki/HowToWriteCsvScenario to write complex test scenario easily]

 * *gwt-test-utils-gxt2-X.jar* : use this module if you want to test UI designed with the popular third-party components librairy [http://www.sencha.com/products/gxt/ GXT 2.x]

 _Note : GXT 3.0 support is not ready yet, but will come soon ! _

Note that those modules all directly depend on *gwt-test-utils-X.jar* and can be combined in your project {{{pom.xml}}}. However, *you should always use the same version* when combining them in a single project.

== Without Maven == 

You can download _gwt-test-utils_ X version jars through the [http://code.google.com/p/gwt-test-utils/downloads/list Download section].

The framework requiers some third-party librairies you should add to your project test classpath :

==== gwt-test-utils : ====

 * gwt-user-2.0.1+.jar
 * gwt-servlet-2.0.1+.jar
 * *gwt-dev-2.0.1+.jar*
 * javassist-3.12+.jar
 * junit-4.5+.jar
 * paranamer-2.0+.jar
 * javaparser-1.0.8+.jar
 * slf4j-api-1.6+.jar (with the adapter of your choice)
 * jackson-core-asl-1.9.1+.jar if you use  {{{com.google.gwt.json}}} API

If you are interested in using a java mocking framework, _gwt-test-utils_ has been tested with :

 * easymock-3.0.jar
 * mockito-core-1.8.5.jar

If you are interested in testing a GWT + Spring application with _gwt-test-utils_, you'll need to add *spring-test-2.5+* and all its related dependencies in your test classpath.

Or, if it's the Guice feature you're interested in, you'll need

 * guice-3.0.jar
 * guice-servlet-3.0.jar

==== gwt-test-utils-csv : ====

Same dependencies as _gwt-test-utils_ module  plus :

 * antlr-runtime-3.1.1.jar


==== gwt-test-utils-gxt2 : ====

Same dependencies as _gwt-test-utils_ module plus :

 * gxt-2.2.x.jar

== With Maven ==

=== Pom releases configuration ===

First, you have to setup the required dependency in the _pom.xml_ :

{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.googlecode.gwt-test-utils</groupId>
      <artifactId>gwt-test-utils</artifactId>
      <version>X</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies>   
}}}


Other modules are listed by theirs artifactId :

 * {{{gwt-test-utils-csv}}}
 * {{{gwt-test-utils-gxt2}}}

== POM snapshots configuration ==

Sometimes, it could be helpfull to get the lastest snapshot. It's done with the following configuration :


{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.googlecode.gwt-test-utils</groupId>
      <artifactId>gwt-test-utils</artifactId>
      <version>X+1-SNAPSHOT</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies> 

...

<repositories>
   ...
   <repository>
      <id>sonatype-snapshots</id>
      <url>http://oss.sonatype.org/content/repositories/snapshots</url>
      <snapshots>
         <enabled>true</enabled>
      </snapshots>
      <releases>
         <enabled>false</enabled>
      </releases>
   </repository>
   ...
</repositories>
}}}


= Configure gwt-test-utils =

=== General project configuration ===

_gwt_test_utils_ *requiers* a {{{META-INF/gwt-test-utils.properties}}} configuration file in your project test classpath.

Add at least one 'module-file' property in it, just like this : 

{{{
com/example/mywebapp/YourModule1.gwt.xml = module-file
com/example/mywebapp/YourModule2.gwt.xml = module-file
}}}

Each module file declared here will be parsed by gwt-test-utils to know which classes are supposed to by compiled in JavaScript? and operated some magic modifications on them.

Note that you won't have to declare .gwt.xml files from modules which are inherited by the module you've declared in gwt-test-utils.properties file. 
So, if {{{YourModule2}}} was inheriting {{{YourModule1}}}, it would be useless to declare {{{YourModule1}}} in your {{{gwt-test-utils.properties}}} file.

=== Test classes configuration ===

All your GWT test classes *must* inherits {{{GwtTest}}} or one of its subclasses instead of the standard {{{GWTTestCase}}}.

Like {{{GWTTestCase}}}, you'll have to override a {{{GwtTest.getModuleName()}}} method to provide the full qualified name of the current tested module by implementing the getModuleName() method. 

*Be carefull to use a module you've declared in your META-INF/gwt-test-utils.properties* with the '{{{module-file}}}' key/value pair. Otherwise, an exception would be thrown.


= Running your tests = 

_gwt_test_utils_ tests are standard JUnit tests :-)

But, since it can be memory expensive (to test GWT in a simple JVM has a cost ;-)), you may have to increase the memory available.

== Under Eclipse == 

Just open a new JUnit Run configuration, and specify in the "JVM Arguments" text area the amount of memory you'll need for your tests. For example :

{{{
-Xmx512M -XX:MaxPermSize=128M
}}}


== With Maven ==

In your project {{{pom.xml}}}, configure the [http://maven.apache.org/plugins/maven-surefire-plugin/ maven-surefire-plugin] to increase the amount of memory available :

{{{
<plugins>
   ...
   <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <configuration>
         <argLine>-Xmx512M -XX:MaxPermSize=128M</argLine>
      </configuration>
   </plugin>
   ...
</plugins>
}}}