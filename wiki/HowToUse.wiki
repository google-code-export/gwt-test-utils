#summary This page explains how to setup your project to use gwt-test-utils
#sidebar TableOfContents

= With Maven =

== Pom release configuration ==

First, you have to setup the required dependency in the _pom.xml_ :

{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.octo.gwt.test</groupId>
      <artifactId>gwt-test-utils</artifactId>
      <version>0.25</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies>   
}}}

*gwt-test-utils* is the core module of gwt-test-utils. It enables to execute GWT client classes in a standalone JVM.

The framework provides some other module to match your needs :

 * *gwt-test-utils-csv* : use this module if you want [http://code.google.com/p/gwt-test-utils/wiki/HowToWriteCsvScenario to write complexe test scenario easily]

 * *gwt-test-utils-gxt* : use this module if you want to test UI designed with the popular third-party components librairy [http://www.sencha.com/products/extgwt/ ext-GWT]

* *gwt-test-utils-spring2* : use this module if you want to test a GWT application which is connected to a Spring2-based backend

* *gwt-test-utils-spring3* : use this module if you want to test a GWT application which is connected to a Spring3-based backend

Note that those modules all directly depend on *gwt-test-utils* and can be combined in your project {{{pom.xml}}}. However It is recommanded to use the same version.

All those modules are hosted on a custom Maven repository, which is provided by [http://www.octo.com/ Octo Technology] :

{{{
<repositories>
   ...
   <repository>
      <id>forge.octo.com</id>
      <url>http://forge.octo.com/nexus/content/repositories/releases/</url>
   </repository>
   ...
</repositories>
}}}

Since *gwt-test-utils* is memory expensive (to test GWT in a simple JVM has a cost ;-)), you  should increase the memory available for your tests, as shown in this example :

{{{
<plugins>
   ...
   <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <configuration>
         <argLine>-XX:MaxPermSize=128M -Xmx512M</argLine>
      </configuration>
   </plugin>
   ...
</plugins>
}}}

== POM snapshot configuration ==

Sometimes, it could be helpfull to get the lastest snapshot. It's done with the following configuration :


{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.octo.gwt.test</groupId>
      <artifactId>gwt-test-utils-integration</artifactId>
      <version>0.26-SNAPSHOT</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies> 

...

<repositories>
   ...
   <repository>
      <id>snapshot-forge.octo.com</id>
         <url>http://forge.octo.com/nexus/content/repositories/snapshots/</url>
         <snapshots>
            <enabled>true</enabled>
         </snapshots>
         <releases>
            <enabled>false</enabled>
         </releases>
      </repository>
   ...
</repositories>
}}}


== Under eclipse, on a maven project ==

To run your unit tests directly inside eclipse in a maven project, you should use the POM configurations explained above (dependency, repository and plugin configuration).

Then, just open a new JUnit Run configuration, and specify in the "JVM Arguments" text area the amount of memory you'll need for your tests.

= Without Maven =

To run your GWT unit tests without Maven, just add the *gwt-test-utils-x.jar* to the classpath :-)

*gwt-test-utils* jars are available through [http://forge.octo.com/nexus/content/repositories/releases/com/octo/gwt/test/ gwt-test-utils releases repository] or through [http://forge.octo.com/nexus/content/repositories/snapshots/com/octo/gwt/test/ gwt-test-utils snapshots repository].

List of third-party jars required by *gwt-test-utils* :

 * cglib-nodep-2.2.jar
 * commons-lang-2.5.jar
 * easymock-3.0.jar
 * gwt-dev-2.1.1.jar
 * gwt-servlet-2.1.1.jar
 * gwt-user-2.1.1.jar
 * htmlparser-1.6.jar
 * javassist-3.12.1.GA.jar
 * junit-4.8.2.jar
 * objenesis-1.2.jar
 * slf4j-api-1.6.1.jar (with the adapter of your choice)


List of third-party jars required by *gwt-test-utils-csv* :

Same dependencies as *gwt-test-utils* plus :

 * antlr-runtime-3.1.1.jar


List of third-party jars required by *gwt-test-utils-gxt* :

Same dependencies as *gwt-test-utils* plus :

 * gwt-css-selector-x.jar (with x the version of *gwt-test-utils* you're using)
 * gxt-2.2.0.jar


List of third-party jars required by *gwt-test-utils-spring2* an:

Same dependencies as *gwt-test-utils* plus :

 * spring-2.5.x.jar


List of third-party jars required by *gwt-test-utils-spring3* an:

Same dependencies as *gwt-test-utils* plus :

 * spring-3.0.x.jar