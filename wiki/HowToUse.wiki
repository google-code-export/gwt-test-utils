#summary This page explains how to setup your project to use gwt-test-utils
#labels Phase-Requirements
#sidebar TableOfContents

= Getting gwt-test-utils =

*gwt-test-utils* is an open source framework composed of several modules you can combine :

 *gwt-test-utils-X.jar* : the core module of gwt-test-utils. It enables to execute GWT client classes in a standalone JVM.

 *gwt-test-utils-csv-X.jar* : use this module if you want [http://code.google.com/p/gwt-test-utils/wiki/HowToWriteCsvScenario to write complexe test scenario easily]

 *gwt-test-utils-gxt-X.jar* : use this module if you want to test UI designed with the popular third-party components librairy [http://www.sencha.com/products/extgwt/ ext-GWT]

 *gwt-css-selector-X.jar* : this module is just an internal dependency of *gwt-test-utils-gxt-X.jar* to simulate CSS 3 selectors for GWT's DOM representation. Actually is just an adaptation of the nice chsan-css-selector API which works for JDK's DOM representation.

 * *gwt-test-utils-spring2-X.jar* : use this module if you want to test a GWT application which is connected to a Spring2-based backend

 * *gwt-test-utils-spring3-X.jar* : use this module if you want to test a GWT application which is connected to a Spring3-based backend

Note that those modules all directly depend on *gwt-test-utils-X.jar* and can be combined in your project {{{pom.xml}}}. However, *you should always use the same version* when combining them in a single project.

== Without Maven == 

You can download *gwt-test-utils* X version jars through the [http://code.google.com/p/gwt-test-utils/downloads/list Download section].

The framework requiers some third-party librairies you should add to your project test classpath :

==== List of third-party jars required by {{{gwt-test-utils}}} ====

 * commons-beanutils-1.8.3.jar
 * commons-logging-1.1.1.jar
 * gwt-dev-2.2.0.jar
 * gwt-servlet-2.2.0.jar
 * gwt-user-2.2.0.jar
 * htmlparser-1.6.jar
 * javassist-3.12.1.GA.jar
 * junit-4.8.2.jar
 * slf4j-api-1.6.1.jar (with the adapter of your choice)

If you are interested in using a java mock framework, *gwt-test-utils* has been tested with :

 * easymock-3.0.jar
 * mockito-core-1.8.5.jar


==== List of third-party jars required by {{{gwt-test-utils-csv}}} ====

Same dependencies as *gwt-test-utils* module  plus :

 * antlr-runtime-3.1.1.jar


==== List of third-party jars required by gwt-test-utils-gxt ====

Same dependencies as *gwt-test-utils* module plus :

 * gwt-css-selector-x.jar (with x the version of *gwt-test-utils* you're using)
 * gxt-2.2.0.jar


==== List of third-party jars required by gwt-test-utils-spring2 ====

Same dependencies as *gwt-test-utils* module plus :

 * spring-2.5.x.jar


==== List of third-party jars required by *gwt-test-utils-spring3 ====

Same dependencies as *gwt-test-utils* module plus :

 * spring-3.0.x.jar


== With Maven ==

=== Pom releases configuration ===

First, you have to setup the required dependency in the _pom.xml_ :

{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.octo.gwt.test</groupId>
      <artifactId>gwt-test-utils</artifactId>
      <version>X</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies>   
}}}


Other modules are listed by theirs artifactId :

 * {{{gwt-test-utils-csv}}}
 * {{{gwt-test-utils-gxt}}}
 * {{{gwt-test-utils-spring2}}}
 * {{{gwt-test-utils-spring3}}}


All those modules are hosted on a custom Maven repository, which is provided by [http://www.octo.com/ Octo Technology] :

{{{
<repositories>
   ...
   <repository>
      <id>forge.octo.com</id>
      <url>http://forge.octo.com/nexus/content/repositories/releases/</url>
   </repository>
   ...
</repositories>
}}}

== POM snapshots configuration ==

Sometimes, it could be helpfull to get the lastest snapshot. It's done with the following configuration :


{{{
<dependencies>
   ...
   <dependency>
      <groupId>com.octo.gwt.test</groupId>
      <artifactId>gwt-test-utils-integration</artifactId>
      <version>X+1-SNAPSHOT</version>
      <scope>test</scope>
   </dependency>
   ...
</dependencies> 

...

<repositories>
   ...
   <repository>
      <id>snapshot-forge.octo.com</id>
         <url>http://forge.octo.com/nexus/content/repositories/snapshots/</url>
         <snapshots>
            <enabled>true</enabled>
         </snapshots>
         <releases>
            <enabled>false</enabled>
         </releases>
      </repository>
   ...
</repositories>
}}}


= Configure gwt-test-utils =

=> META-INF/gwt-test-utils.properties

=> override getModuleName()



= Running your tests = 

Since *gwt-test-utils* is memory expensive (to test GWT in a simple JVM has a cost ;-)), you  should increase the memory available.

== Under Eclipse == 

Just open a new JUnit Run configuration, and specify in the "JVM Arguments" text area the amount of memory you'll need for your tests. For example :

{{{
-Xmx512M -XX:MaxPermSize=128M
}}}


== With Maven ==

In your project {{{pom.xml}}}, configure the Maven test plugin to increase the amount of memory available :

{{{
<plugins>
   ...
   <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <configuration>
         <argLine>-Xmx512M -XX:MaxPermSize=128M</argLine>
      </configuration>
   </plugin>
   ...
</plugins>
}}}