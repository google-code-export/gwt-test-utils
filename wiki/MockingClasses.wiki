#summary How to write unit tests that make use of mock objects
#sidebar TableOfContents

= Using mock objects =

Sometimes, you may be writing unit tests for a class that has dependencies to other classes, and that interact with them via method calls. In this case, you might want to use mock objets instead of real objects for these classes : they allow you to test that the right method calls were made, instead of testing the actual behavior of the objects.

gwt-test-utils allow you to write unit tests that use mock objects, using the [http://easymock.org/ EasyMock] mocking framework.  Those tests need to extend  {{{GwtTestWithMocks}}}.

{{{
public class MyUnitTestWithMocks extends GwtTestWithMocks {

   @Mock
   private Foo fooMock;

   private MyComposite composite;

   @Before
   public void init() throws Exception {
      composite = new Composite();
   }

   @SuppressWarnings("unchecked")
   @Test
   public void checkCallingFoo() {
      //Setup
      Button button = GwtReflectionUtils.getPrivateFieldValue(composite, "button");
      Label label = GwtReflectionUtils.getPrivateFieldValue(composite, "label");

      fooMock.sayHello(EasyMock.eq("OCTO"));
      EasyMock.expectLastCall().andReturn("mocked call");
      replay();

      // Precondition
      Assert.assertEquals(null, label.getText());

      // test call to mock object
      Browser.click(button);

      // Assert
      verify();
      Assert.assertEquals("mocked call", label.getText());
   }

}
}}}


*{{{@Mock}}}* tell *gwt-test-utils* to create a mock object

*{{{replay()}}}* will call {{{EasyMock.replay(..)}}} on each declared {{{@Mock}}} in the test class.

*{{{verify()}}}* will call {{{EasyMock.verify(..)}}} on each declared {{{@Mock}}} in the test class.